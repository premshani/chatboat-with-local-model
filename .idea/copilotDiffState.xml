<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/pom.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/pom.xml" />
              <option name="originalContent" value="&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;&#10;  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;  &lt;groupId&gt;org.example&lt;/groupId&gt;&#10;  &lt;artifactId&gt;chatboat-with-local-model&lt;/artifactId&gt;&#10;  &lt;packaging&gt;jar&lt;/packaging&gt;&#10;  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&#10;  &lt;name&gt;chatboat-with-local-model Spring Boot App&lt;/name&gt;&#10;  &lt;url&gt;http://maven.apache.org&lt;/url&gt;&#10;  &lt;parent&gt;&#10;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;&#10;    &lt;version&gt;3.2.5&lt;/version&gt;&#10;    &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;&#10;  &lt;/parent&gt;&#10;  &lt;dependencies&gt;&#10;    &lt;!-- WebFlux gives us WebClient and SSE streaming --&gt;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;      &lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt;&#10;    &lt;/dependency&gt;&#10;&#10;    &lt;!-- Optional: validation for DTOs --&gt;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;      &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;&#10;    &lt;/dependency&gt;&#10;&#10;    &lt;!-- Lombok (optional) --&gt;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;      &lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;      &lt;optional&gt;true&lt;/optional&gt;&#10;    &lt;/dependency&gt;&#10;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;&#10;      &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;&#10;    &lt;/dependency&gt;&#10;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;      &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&#10;    &lt;/dependency&gt;&#10;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;      &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&#10;      &lt;scope&gt;test&lt;/scope&gt;&#10;    &lt;/dependency&gt;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;io.projectreactor.netty&lt;/groupId&gt;&#10;      &lt;artifactId&gt;reactor-netty-http&lt;/artifactId&gt;&#10;    &lt;/dependency&gt;&#10;  &lt;/dependencies&gt;&#10;  &lt;build&gt;&#10;    &lt;plugins&gt;&#10;      &lt;plugin&gt;&#10;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;        &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&#10;      &lt;/plugin&gt;&#10;    &lt;/plugins&gt;&#10;    &lt;finalName&gt;chatboat-with-local-model&lt;/finalName&gt;&#10;  &lt;/build&gt;&#10;&lt;/project&gt;&#10;" />
              <option name="updatedContent" value="&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;&#10;  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;  &lt;groupId&gt;org.example&lt;/groupId&gt;&#10;  &lt;artifactId&gt;chatboat-with-local-model&lt;/artifactId&gt;&#10;  &lt;packaging&gt;jar&lt;/packaging&gt;&#10;  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&#10;  &lt;name&gt;chatboat-with-local-model Spring Boot App&lt;/name&gt;&#10;  &lt;url&gt;http://maven.apache.org&lt;/url&gt;&#10;  &lt;parent&gt;&#10;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;&#10;    &lt;version&gt;3.2.5&lt;/version&gt;&#10;    &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;&#10;  &lt;/parent&gt;&#10;  &lt;dependencies&gt;&#10;    &lt;!-- WebFlux gives us WebClient and SSE streaming --&gt;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;      &lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt;&#10;    &lt;/dependency&gt;&#10;&#10;    &lt;!-- Optional: validation for DTOs --&gt;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;      &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;&#10;    &lt;/dependency&gt;&#10;&#10;    &lt;!-- Lombok (optional) --&gt;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;      &lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;      &lt;optional&gt;true&lt;/optional&gt;&#10;    &lt;/dependency&gt;&#10;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;&#10;      &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;&#10;    &lt;/dependency&gt;&#10;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;      &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&#10;    &lt;/dependency&gt;&#10;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;      &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&#10;      &lt;scope&gt;test&lt;/scope&gt;&#10;    &lt;/dependency&gt;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;io.projectreactor.netty&lt;/groupId&gt;&#10;      &lt;artifactId&gt;reactor-netty-http&lt;/artifactId&gt;&#10;    &lt;/dependency&gt;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;jakarta.servlet&lt;/groupId&gt;&#10;      &lt;artifactId&gt;jakarta.servlet-api&lt;/artifactId&gt;&#10;      &lt;version&gt;6.0.0&lt;/version&gt;&#10;      &lt;scope&gt;provided&lt;/scope&gt;&#10;    &lt;/dependency&gt;&#10;  &lt;/dependencies&gt;&#10;  &lt;build&gt;&#10;    &lt;plugins&gt;&#10;      &lt;plugin&gt;&#10;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;        &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&#10;      &lt;/plugin&gt;&#10;    &lt;/plugins&gt;&#10;    &lt;finalName&gt;chatboat-with-local-model&lt;/finalName&gt;&#10;  &lt;/build&gt;&#10;&lt;/project&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/ChatboatWithLocalModelApplication.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/ChatboatWithLocalModelApplication.java" />
              <option name="originalContent" value="package org.example;&#10;&#10;import org.springframework.boot.SpringApplication;&#10;import org.springframework.boot.autoconfigure.SpringBootApplication;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.web.cors.CorsConfiguration;&#10;import org.springframework.web.cors.UrlBasedCorsConfigurationSource;&#10;import org.springframework.web.filter.CorsFilter;&#10;&#10;@SpringBootApplication&#10;public class ChatboatWithLocalModelApplication {&#10;    public static void main(String[] args) {&#10;        SpringApplication.run(ChatboatWithLocalModelApplication.class, args);&#10;    }&#10;&#10;    @Bean&#10;    public CorsFilter corsFilter() {&#10;        CorsConfiguration config = new CorsConfiguration();&#10;        config.addAllowedOrigin(&quot;http://localhost:3000&quot;);&#10;        config.addAllowedHeader(&quot;*&quot;);&#10;        config.addAllowedMethod(&quot;*&quot;);&#10;        config.setAllowCredentials(true);&#10;        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();&#10;        source.registerCorsConfiguration(&quot;/**&quot;, config);&#10;        return new CorsFilter(source);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.example;&#10;&#10;import org.springframework.boot.SpringApplication;&#10;import org.springframework.boot.autoconfigure.SpringBootApplication;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.web.cors.CorsConfiguration;&#10;import org.springframework.web.cors.reactive.CorsWebFilter;&#10;import org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource;&#10;&#10;@SpringBootApplication&#10;public class ChatboatWithLocalModelApplication {&#10;    public static void main(String[] args) {&#10;        SpringApplication.run(ChatboatWithLocalModelApplication.class, args);&#10;    }&#10;&#10;    @Bean&#10;    public CorsWebFilter corsWebFilter() {&#10;        CorsConfiguration config = new CorsConfiguration();&#10;        config.addAllowedOrigin(&quot;http://localhost:3000&quot;);&#10;        config.addAllowedHeader(&quot;*&quot;);&#10;        config.addAllowedMethod(&quot;*&quot;);&#10;        config.setAllowCredentials(true);&#10;        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();&#10;        source.registerCorsConfiguration(&quot;/**&quot;, config);&#10;        return new CorsWebFilter(source);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/PropertiesController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/PropertiesController.java" />
              <option name="updatedContent" value="package org.example;&#10;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import org.springframework.http.MediaType;&#10;import org.springframework.web.bind.annotation.GetMapping;&#10;import org.springframework.web.bind.annotation.RestController;&#10;import reactor.core.publisher.Mono;&#10;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;@RestController&#10;public class PropertiesController {&#10;&#10;    @Value(&quot;${ollama.base-url}&quot;)&#10;    private String baseUrl;&#10;&#10;    @Value(&quot;${ollama.model}&quot;)&#10;    private String model;&#10;&#10;    @Value(&quot;${ollama.system-prompt}&quot;)&#10;    private String systemPrompt;&#10;&#10;    @Value(&quot;${ollama.timeout-ms}&quot;)&#10;    private String timeoutMs;&#10;&#10;    @GetMapping(value = &quot;/api/properties&quot;, produces = MediaType.APPLICATION_JSON_VALUE)&#10;    public Mono&lt;Map&lt;String, String&gt;&gt; getProperties() {&#10;        Map&lt;String, String&gt; props = new HashMap&lt;&gt;();&#10;        props.put(&quot;baseUrl&quot;, baseUrl);&#10;        props.put(&quot;model&quot;, model);&#10;        props.put(&quot;systemPrompt&quot;, systemPrompt);&#10;        props.put(&quot;timeoutMs&quot;, timeoutMs);&#10;        return Mono.just(props);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>